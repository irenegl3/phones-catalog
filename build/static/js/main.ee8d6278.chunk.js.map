{"version":3,"sources":["components/Info.js","components/FormCreate.js","components/FormUpdate.js","components/Catalogue.js","components/App.js","index.js"],"names":["Info","props","Modal","show","onHide","this","handleClose","Header","closeButton","Title","phone","name","Body","manufacturer","description","color","screen","processor","ram","price","Component","FormCreate","state","counter","paramsToUpdate","invalidname","invalidmanufacturer","invalidcolor","invaliddescription","invalidscreen","invalidimagefile","invalidprocessor","invalidram","invalidprice","handleSubmit","bind","charsCounter","handleChange","evt","value","target","setState","parseInt","length","imageFileName","event","preventDefault","Object","keys","createPhone","alert","Form","onSubmit","Group","as","Row","Label","column","sm","Col","Control","type","isInvalid","onChange","Feedback","rows","Text","muted","min","Button","variant","onClick","FormUpdate","image","updatePhone","id","required","ref","textarea","placeholder","Catalogue","handleClick","deletePhoneConfirmation","deletePhone","handleCloseConfirmation","service","text","substring","handleChangeOfState","phoneId","deletePhoneConfirmed","selected","modal","info","formCreate","formUpdate","confirm","Footer","catalogue","phones","Container","xs","md","lg","className","Card","Img","src","size","CardDeck","map","index","Subtitle","displayText","icon","faEdit","faTrashAlt","urljoin","require","apiBaseUrl","App","loading","delete","error","axios","get","then","response","data","catch","console","log","aux","newPhones","slice","FormData","i","toString","splice","formData","countPhones","append","JSON","stringify","post","headers","res","push","Spinner","animation","role","Alert","Heading","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee8d6278.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\n\nclass Info extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <Modal show={true} onHide={this.props.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            {this.props.phone.name}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <ul>\n                            <li><b>Manufacturer: </b>{this.props.phone.manufacturer}</li>\n                            <li><b>Description: </b>{this.props.phone.description}</li>\n                            <li><b>Color: </b>{this.props.phone.color}</li>\n                            <li><b>Screen: </b>{this.props.phone.screen}</li>\n                            <li><b>Processor: </b>{this.props.phone.processor}</li>\n                            <li><b>RAM: </b>{this.props.phone.ram}</li>\n                            <li><b>Price: </b>{this.props.phone.price} €</li>\n                        </ul>\n                    </Modal.Body>\n                </Modal >\n            </div>\n        );\n    }\n}\n\nexport default Info;","import React, { Component } from 'react';\nimport { Modal, Button, Form, Row, Col, OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nclass FormCreate extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            counter: 0,\n            paramsToUpdate: {},\n            invalidname: true,\n            invalidmanufacturer: true,\n            invalidcolor: true,\n            invaliddescription: true,\n            invalidscreen: true,\n            invalidimagefile: true,\n            invalidprocessor: true,\n            invalidram: true,\n            invalidprice: true\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.charsCounter = this.charsCounter.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(evt) {\n        const value = evt.target.value;\n        // invalid states\n        let state = {};\n        state[evt.target.name] = \"invalid\" + evt.target.name;\n        // params to update state\n        let paramsToUpdate = this.state.paramsToUpdate;\n        if (evt.target.name !== \"imagefile\") {\n            paramsToUpdate[evt.target.name] = value;\n        }\n        // update states\n        this.setState({\n            [state[evt.target.name]]: false,\n            paramsToUpdate: paramsToUpdate\n        });\n        //if price or ram are a negative number: invalid\n        if (evt.target.name === \"ram\" || evt.target.name === \"price\") {\n            if (parseInt(value) < 0) {\n                this.setState({\n                    [state[evt.target.name]]: true\n                });\n            }\n        }\n        // If empty field: invalid\n        if (value.length === 0) {\n            this.setState({\n                [state[evt.target.name]]: true\n            });\n        }\n\n        // handling image\n        if (evt.target.name === \"imagefile\") {\n            paramsToUpdate.imageFileName = evt.target.value;\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (Object.keys(this.state.paramsToUpdate).length === 9) {\n            this.props.createPhone(this.state.paramsToUpdate);\n        }\n        else {\n            alert(\"You have to fill every field\");\n        }\n    }\n\n    charsCounter() {\n        var counter = this.description.value.length;\n        this.setState({\n            counter: counter\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal show={true} onHide={this.props.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            Create a new phone\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form onSubmit={this.handleSubmit} >\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Name</Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control type=\"text\" name=\"name\" isInvalid={this.state.invalidname} onChange={this.handleChange} />\n                                    <Form.Control.Feedback type=\"invalid\">Required</Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"3\">Manufacturer</Form.Label>\n                                <Col sm=\"9\">\n                                    <Form.Control type=\"text\" name=\"manufacturer\" isInvalid={this.state.invalidmanufacturer} onChange={this.handleChange} />\n                                    <Form.Control.Feedback type=\"invalid\">Required</Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>Description:</Form.Label>\n                                <Form.Control rows=\"5\" isInvalid={this.state.invaliddescription} name=\"description\" onChange={this.charsCounter, this.handleChange} />\n                                <Form.Text muted>\n                                    {1234 - this.state.counter} characters left\n                                </Form.Text>\n                                <Form.Control.Feedback type=\"invalid\">Required</Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Color</Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control type=\"text\" name=\"color\" isInvalid={this.state.invalidcolor} onChange={this.handleChange} />\n                                    <Form.Control.Feedback type=\"invalid\">Required</Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Price</Form.Label>\n                                <Col sm=\"8\">\n                                    <Form.Control type=\"number\" name=\"price\" isInvalid={this.state.invalidprice} min=\"0\" onChange={this.handleChange} />\n                                    <Form.Control.Feedback type=\"invalid\">Must be a positive number</Form.Control.Feedback>\n                                </Col>\n                                <Form.Label column sm=\"2\">€</Form.Label>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"3\">Image URL</Form.Label>\n                                <Col sm=\"9\">\n                                    <Form.Control type=\"url\" name=\"imagefile\" isInvalid={this.state.invalidimagefile} onChange={this.handleChange} />\n                                    <Form.Control.Feedback type=\"invalid\">Required</Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Screen</Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control type=\"text\" name=\"screen\" isInvalid={this.state.invalidscreen} onChange={this.handleChange} />\n                                    <Form.Control.Feedback type=\"invalid\">Required</Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Processor</Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control type=\"text\" name=\"processor\" isInvalid={this.state.invalidprocessor} onChange={this.handleChange} />\n                                    <Form.Control.Feedback type=\"invalid\">Required</Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Ram</Form.Label>\n                                <Col sm=\"8\">\n                                    <Form.Control type=\"number\" isInvalid={this.state.invalidram} min=\"0\" name=\"ram\" onChange={this.handleChange} />\n                                    <Form.Control.Feedback type=\"invalid\">Must be a positive number</Form.Control.Feedback>\n                                </Col>\n                                <Form.Label column sm=\"2\">GB</Form.Label>\n                            </Form.Group>\n                            <Form.Group>\n                                <Button variant=\"outline-success\" type=\"submit\" onClick={this.handleSubmit}>Create</Button>\n                            </Form.Group>\n                        </Form>\n                    </Modal.Body >\n                </Modal >\n            </div >\n        );\n    }\n}\n\nexport default FormCreate;","import React, { Component } from 'react';\nimport { Button, Modal, Form, Row, Col } from 'react-bootstrap';\n\nclass FormUpdate extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            counter: 0\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.charsCounter = this.charsCounter.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let paramsToUpdate = {};\n        if (this.description.value) {\n            paramsToUpdate.description = this.description.value;\n        }\n        if (this.name.value) {\n            paramsToUpdate.name = this.name.value;\n        }\n        if (this.manufacturer.value) {\n            paramsToUpdate.manufacturer = this.manufacturer.value;\n        }\n        if (this.color.value) {\n            paramsToUpdate.color = this.color.value;\n        }\n        if (this.screen.value) {\n            paramsToUpdate.screen = this.screen.value;\n        }\n        if (this.price.value) {\n            paramsToUpdate.price = this.price.value;\n        }\n        if (this.processor.value) {\n            paramsToUpdate.processor = this.processor.value;\n        }\n        if (this.ram.value) {\n            paramsToUpdate.ram = this.ram.value;\n        }\n        if (this.image.value) {\n            paramsToUpdate.imageFileName = this.image.value;\n        }\n        this.props.updatePhone(this.props.phone.id,paramsToUpdate);\n    }\n\n    charsCounter() {\n        var counter = this.description.value.length;\n        this.setState({\n            counter: counter\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal show={true} onHide={this.props.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            Update the phone information\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form onSubmit={this.handleSubmit} >\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Name</Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control required type=\"text\" ref={textarea => this.name = textarea} placeholder={this.props.phone.name}/>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"3\">Manufacturer</Form.Label>\n                                <Col sm=\"9\">\n                                    <Form.Control required type=\"text\" ref={textarea => this.manufacturer = textarea} placeholder={this.props.phone.manufacturer}/>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>Description:</Form.Label>\n                                <Form.Control required as=\"textarea\" rows=\"5\" ref={textarea => this.description = textarea} onChange={this.charsCounter} placeholder={this.props.phone.description}/>\n                                <Form.Text muted>\n                                    {1234 - this.state.counter} characters left\n                                </Form.Text>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Color</Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control required type=\"text\" ref={textarea => this.color = textarea} placeholder={this.props.phone.color}/>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Price</Form.Label>\n                                <Col sm=\"8\">\n                                    <Form.Control required type=\"text\" ref={textarea => this.price = textarea} placeholder={this.props.phone.price}/>\n                                </Col>\n                                <Form.Label column sm=\"2\">€</Form.Label>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Image</Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control required type=\"text\" ref={textarea => this.image = textarea} placeholder={this.props.phone.imageFileName}/>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Screen</Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control required type=\"text\" ref={textarea => this.screen = textarea} placeholder={this.props.phone.screen}/>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Processor</Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Control required type=\"text\" ref={textarea => this.processor = textarea} placeholder={this.props.phone.processor}/>\n                                </Col>\n                            </Form.Group>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm=\"2\">Ram</Form.Label>\n                                <Col sm=\"8\">\n                                    <Form.Control required type=\"text\" ref={textarea => this.ram = textarea} placeholder={this.props.phone.ram}/>\n                                </Col>\n                                <Form.Label column sm=\"2\">GB</Form.Label>\n                            </Form.Group>\n                            <Form.Group>\n                                <Button variant=\"outline-success\" onClick={this.handleSubmit}>Update</Button>\n                            </Form.Group>\n                        </Form>\n                    </Modal.Body >\n                </Modal >\n            </div >\n        );\n    }\n}\n\nexport default FormUpdate;","import React, { Component } from 'react';\nimport { Container, Row, Col, Card, Button, CardDeck, Modal, Alert } from 'react-bootstrap';\nimport Info from './Info';\nimport FormCreate from './FormCreate';\nimport FormUpdate from './FormUpdate';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\nclass Catalogue extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.createPhone = this.createPhone.bind(this);\n    this.updatePhone = this.updatePhone.bind(this);\n    this.deletePhoneConfirmation = this.deletePhoneConfirmation.bind(this);\n    this.deletePhone = this.deletePhone.bind(this);\n    this.handleCloseConfirmation = this.handleCloseConfirmation.bind(this);\n  }\n\n  handleClick(phone, service) {\n    this.props.handleClick(phone, service);\n  }\n\n  handleCloseConfirmation(){\n    this.props.handleClick();\n  }\n\n  displayText(text) {\n    let limit = 200;\n    if (text.length <= limit) {\n      return text;\n    } else {\n      return text.substring(0, limit) + \" ...\";\n    }\n  }\n\n  createPhone(paramsToUpdate) {\n    this.props.handleChangeOfState(null, paramsToUpdate);\n  }\n\n  updatePhone(phoneId, paramsToUpdate) {\n    this.props.handleChangeOfState(phoneId, paramsToUpdate);\n  }\n\n  deletePhone(phoneId) {\n    this.props.deletePhone(phoneId);\n  }\n\n  deletePhoneConfirmation() {\n    this.props.deletePhoneConfirmed(this.props.selected);\n  }\n\n  render() {\n    let modal;\n    if (this.props.info) {\n      modal = <Info\n        phone={this.props.selected}\n        handleClose={this.handleClick}\n      ></Info>\n    } else if (this.props.formCreate) {\n      modal = <FormCreate\n        handleClose={this.handleClick}\n        createPhone={this.createPhone}\n      ></FormCreate>\n    } else if (this.props.formUpdate) {\n      modal = <FormUpdate\n        phone={this.props.selected}\n        handleClose={this.handleClick}\n        updatePhone={this.updatePhone}\n      ></FormUpdate>\n    }\n\n    let alert;\n     if (this.props.confirm) {\n      alert = <Modal show={true} onHide={this.handleCloseConfirmation}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            Confirm your action please\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>\n            You are about to delete a phone. Are you sure?\n        </p>\n        </Modal.Body >\n        <Modal.Footer> <Button onClick={() => this.deletePhoneConfirmation()} variant=\"outline-success\">\n          Yes, I'm sure.\n          </Button></Modal.Footer>\n      </Modal >\n     }\n    let length = this.props.phones.length;\n    let catalogue;\n    if (length == 0) {\n      catalogue = <Container>\n        <Row>\n          <Col xs={8} sm={6} md={4} lg={3} className=\"col-personalized\" key={-1}>\n            <Card >\n              <Row className={\"card-img-personalized\"} >\n                <Card.Img src={\"add.png\"} className={\"phone-img\"} />\n              </Row>\n              <Row className={\"card-body-personalized\"}>\n                <Card.Body>\n                  <Card.Title>Add a new phone</Card.Title>\n                  <div className={\"line-card\"}>\n                  </div>\n                  <br></br>\n                  <Card.Text>\n                    Click here to add a new phone into the catalogue.\n                        </Card.Text>\n                </Card.Body>\n                <Card.Footer className={\"card-footer-personalized\"}>\n                  <Button variant=\"outline-primary\" className={\"btn-add\"} size=\"lg\" onClick={() => this.props.handleClick(null, 'create')}>Add phone</Button>\n                </Card.Footer>\n              </Row>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n        ;\n    } else {\n      catalogue = <Container>\n        <Row>\n          <CardDeck>\n            {this.props.phones.map((phone, index) => (\n              <div className={\"wrapper\"}>\n                <Col xs={8} sm={6} md={4} lg={3} className=\"col-personalized\" key={index}>\n                  <Card >\n                    <Row className={\"card-img-personalized\"} >\n                      <Card.Img src={phone.imageFileName} className={\"phone-img\"} />\n                    </Row>\n                    <Row className={\"card-body-personalized\"}>\n                      <Card.Body>\n                        <Card.Title>{phone.name}</Card.Title>\n                        <div className={\"line-card\"}>\n                        </div>\n                        <Card.Subtitle>{phone.manufacturer}</Card.Subtitle>\n                        <br></br>\n                        <Card.Text>\n                          {this.displayText(phone.description)}\n                        </Card.Text>\n                      </Card.Body>\n                      <Card.Footer className={\"card-footer-personalized\"}>\n                        <Button variant=\"link\" onClick={() => this.handleClick(phone, 'info')}>{'>'} More info</Button>\n                        <Button variant=\"link\" onClick={() => this.handleClick(phone, 'update')}><FontAwesomeIcon icon={faEdit} /></Button>\n                        <Button variant=\"link\" onClick={() => this.deletePhone(phone.id)}><FontAwesomeIcon icon={faTrashAlt} /></Button>\n                      </Card.Footer>\n                    </Row>\n                  </Card>\n                </Col>\n                {(index + 1 === length) &&\n                  <Col xs={8} sm={6} md={4} lg={3} className=\"col-personalized\" key={index + 1}>\n                    <Card >\n                      <Row className={\"card-img-personalized\"} >\n                        <Card.Img src={\"add.png\"} className={\"phone-img\"} />\n                      </Row>\n                      <Row className={\"card-body-personalized\"}>\n                        <Card.Body>\n                          <Card.Title>Add a new phone</Card.Title>\n                          <div className={\"line-card\"}>\n                          </div>\n                          <br></br>\n                          <Card.Text>\n                            Click here to add a new phone into the catalogue.\n                    </Card.Text>\n                        </Card.Body>\n                        <Card.Footer className={\"card-footer-personalized\"}>\n                          <Button variant=\"outline-primary\" className={\"btn-add\"} size=\"lg\" onClick={() => this.props.handleClick(null, 'create')}>Add phone</Button>\n                        </Card.Footer>\n                      </Row>\n                    </Card>\n                  </Col>\n                }\n              </div>\n            ))}\n          </CardDeck>\n        </Row>\n      </Container>\n    }\n\n    return (\n      <div className={\"catalogue\"}>\n        <div className={\"catalogue-header\"}>\n          <h1>Phone catalogue</h1>\n          <div className={\"line-title\"}></div>\n          <p>Know more about our phones!</p>\n        </div>\n        {catalogue}\n        {modal}\n        {alert}\n      </div>\n    );\n  }\n}\n\nexport default Catalogue;","\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Catalogue from './Catalogue';\nimport { Spinner, Alert } from 'react-bootstrap';\n\nlet urljoin = require('url-join');\nconst service = 'http://localhost:3002'; //server port\nconst apiBaseUrl = urljoin(service);\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phones: [],\n      loading: null,\n      selected: null,\n      info: null,\n      formCreate: null,\n      formUpdate: null,\n      delete: false,\n      error: false,\n      confirm: null\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChangeOfState = this.handleChangeOfState.bind(this);\n    this.deletePhone = this.deletePhone.bind(this);\n    this.deletePhoneConfirmed = this.deletePhoneConfirmed.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    })\n    axios.get(urljoin(apiBaseUrl, \"/phones\"))\n      .then((response) => {\n        // setTimeout(() => { //to check the loading spinner\n        this.setState({\n          loading: null,\n          phones: response.data\n        })\n        //  }, 1000);\n      })\n      .catch((error) => {\n        this.setState({\n          loading: null,\n          error: true\n        })\n\n        //alert(`Error when connecting to the server. ${error.response && error.response.data ?\n        // error.response.data.error || '' : ''}`)\n        console.log(error);\n      })\n\n  }\n\n  handleClick(phone, service) {\n    switch (service) {\n      case 'create':\n        this.setState({\n          formCreate: true\n        });\n        break;\n      case 'info':\n        this.setState({\n          selected: phone,\n          info: true\n        });\n        break;\n      case 'update':\n        this.setState({\n          selected: phone,\n          formUpdate: true\n        });\n        break;\n      default:\n        this.setState({\n          formCreate: null,\n          formUpdate: null,\n          info: null,\n          confirm: null\n        });\n        break;\n    }\n  }\n\n  deletePhone(id) {\n    this.setState({\n      selected: id,\n      confirm: true\n    });\n  }\n\n  deletePhoneConfirmed(id) {\n    let newPhones = this.state.phones.slice();\n    let formData = new FormData();\n    this.setState({\n      loading: true,\n      selected: null,\n      confirm: null\n    });\n    let aux;\n    for (let i = 0; i < newPhones.length; i++) {\n      if (newPhones[i].id === id) {\n        aux = i;\n        break;\n      }\n    }\n    axios.delete(urljoin(apiBaseUrl, \"/phones/\", id.toString()))\n      .then((response) => {\n        let res = {};\n        res = response.data;\n        newPhones.splice(aux, 1);\n        this.setState({\n          phones: newPhones,\n          loading: null\n        })\n      })\n      .catch((error) => {\n        this.setState({\n          loading: null,\n          error: true\n        });\n        //alert(`Error when connecting to server. ${error}`);\n        console.log(error);\n      })\n  }\n\n  handleChangeOfState(id, paramsToUpdate) {\n    let newPhones = this.state.phones.slice();\n    let formData = new FormData();\n    this.setState({\n      loading: true,\n      selected: null,\n      formCreate: null,\n      formUpdate: null\n    });\n    let aux;\n    let phoneId = \"\"; //ver que tipo es\n\n    // If id, update existing phone\n    if (id) {\n      phoneId = id;\n      for (let i = 0; i < newPhones.length; i++) {\n        if (newPhones[i].id === id) {\n          aux = i;\n          break;\n        }\n      }\n    }\n    // If id is null, create new phone \n    else {\n      aux = newPhones.length;\n      paramsToUpdate.countPhones = newPhones.length;\n    }\n    formData.append(\"body\", JSON.stringify({ phoneId: phoneId, paramsToUpdate: paramsToUpdate }));\n    axios.post(urljoin(apiBaseUrl, \"/phones\"), formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    })\n      .then((response) => {\n        let res = {};\n        res = response.data;\n        // phone already exists\n        if (res === null) {\n          this.setState({\n            loading: null\n          })\n          alert('The phone you are trying to insert already exists.');\n        }\n        else {\n          if (!id) {\n            newPhones.push(res);\n          } else { // update\n            newPhones[aux].id = res[1][0].id;\n            newPhones[aux].name = res[1][0].name;\n            newPhones[aux].manufacturer = res[1][0].manufacturer;\n            newPhones[aux].description = res[1][0].description;\n            newPhones[aux].color = res[1][0].color;\n            newPhones[aux].screen = res[1][0].screen;\n            newPhones[aux].processor = res[1][0].processor;\n            newPhones[aux].imageFileName = res[1][0].imageFileName;\n            newPhones[aux].ram = res[1][0].ram;\n            newPhones[aux].price = res[1][0].price;\n          }\n          this.setState({\n            phones: newPhones,\n            loading: null\n          })\n        }\n      })\n      .catch((error) => {\n        this.setState({\n          loading: null,\n          error: true\n        });\n        //alert(`Error when connecting to server. ${error}`);\n        console.log(error);\n      })\n  }\n\n\n  render() {\n    let catalogue;\n    if (this.state.loading === true) {\n      catalogue =\n        <div className={\"spinner\"}><Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner></div>\n    }\n    else if (!this.state.error) {\n      catalogue = <div >\n        <Catalogue\n          phones={this.state.phones}\n          selected={this.state.selected}\n          info={this.state.info}\n          formCreate={this.state.formCreate}\n          formUpdate={this.state.formUpdate}\n          handleClick={this.handleClick}\n          handleChangeOfState={this.handleChangeOfState}\n          deletePhone={this.deletePhone}\n          deletePhoneConfirmed={this.deletePhoneConfirmed}\n          confirm={this.state.confirm}\n        />\n        <div className={\"footer\"}>\n          <p>Irene García López</p>\n          <p>November 2020</p>\n        </div>\n      </div>\n    }\n\n    return (\n      <div>\n        {this.state.error && <Alert variant=\"danger\" >\n          <Alert.Heading>Oh snap, there has been an error!</Alert.Heading>\n          <p>\n            Error connecting to the server. Try again later.\n          </p>\n        </Alert>}\n        {catalogue}\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}